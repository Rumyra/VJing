<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <link rel="shortcut icon" href="favicon.ico" />
  <title>VJing Demo</title>
  <link type="text/css" href="style.css" rel="stylesheet" media="screen">
  <script src="bezier.js"></script>
  <script src="d3.min.js"></script>
  <script src="MIDIValues.js"></script>
  <script src="mediaLibrary.js"></script>
  <script src="visualFuncs.js"></script>
  <style type="text/css">
  html {cursor: none;}
  #screen > div,
  #screen > div > section {
    position: absolute; top:0px; left:0px;
    width: 100%; height: 94vh;
  }
  svg {width: 100vw; height: 100vh; padding:0px; margin:0px;}
  .video {}
  .video video {width:100%; height:auto;}
  .css {background-color: black;}
  #screen-left {opacity: 1;}
  #screen-right {opacity: 0;}
  </style>
</head>

<body>
  <div class="container">
    <section id="controls">
      <button id="play-audio">Play Audio</button>
      <button id="use-mic">Use Mic</button>
      <audio id="simon" src="media/daveClarkeIloveTecho2014.mp3" loop></audio>
    </section>

    <section id="screen">

      <div id="screen-left">
        <section class="video">
          <video id="video-one" autoplay loop>
            <source src="media/games/pong.mp4" type="video/mp4">
          </video>
        </section>
        <section class="css">
          <section id="simpleSpectrum">
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
          </section>
          <section id="superChart"><svg></svg></section>
          <section id="superSquares"><svg></svg></section>
          <section id="superSunburst"><svg></svg></section>
        </section>
      </div>


      <div id="screen-right">
        <section class="video">
          <video id="video-two" autoplay loop>
            <source src="media/games/breakout.mp4" type="video/mp4">
          </video>
        </section>
        <section class="css">
          <section id="superSpiral"><svg></svg></section>
          <section id="superCentric"><svg></svg></section>
          <section id="diagCircle"><svg></svg></section>
          <section id="superSpotsOne"><svg></svg></section>
        </section>
      </div>

      <div id="black"></div>
      <div id="white"></div>
    </section>
  </div>
</body>

<script type="text/javascript">

// ~~~~ SETUP vars
var AudioContext = (window.AudioContext || window.webkitAudioContext);

var simonSoundEl = document.getElementById('simon'),
  playButton = document.getElementById('play-audio'),
  micButton = document.getElementById('use-mic'),
  videoElOne = document.getElementById('video-one'),
  videoElTwo = document.getElementById('video-two'),
  // videoCont = document.getElementById('video'),
  // cssCont = document.getElementById('css'),
  blackEl = document.getElementById('black'),
  whiteEl = document.getElementById('white'),
  leftScreen = document.getElementById('screen-left'),
  leftVidEl = leftScreen.getElementsByClassName('video')[0],
  leftCssEl = leftScreen.getElementsByClassName('css')[0],
  rightScreen = document.getElementById('screen-right'),
  rightVidEl = rightScreen.getElementsByClassName('video')[0],
  rightCssEl = rightScreen.getElementsByClassName('css')[0],
  set = 'css',
  threshold = 0,
  elColour = 0,

  cssReqAnimId,

  audioAPI = new AudioContext,
  guiltMp3 = audioAPI.createMediaElementSource(simonSoundEl),
  analyserNode = audioAPI.createAnalyser(),
  frequencyData = new Uint8Array(16),
  easing = BezierEasing(0.2, 0.8, 0.8, 0.2);

// ~~~~ ANALYSER
analyserNode.fftSize = 64;

// set up getUserMedia
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

var playGuilt = function playGuilt() {
  guiltMp3.connect(analyserNode);
  guiltMp3.connect(audioAPI.destination);
  analyserNode.connect(audioAPI.destination);
  simonSoundEl.play();
  // flashLights();
  // sizeCircles();
  // crazedCircles();
  mixScreens();
}

var pickUpSound = function pickUpSound(stream) {
  var ambientNoise = audioAPI.createMediaStreamSource(stream);
  ambientNoise.connect(analyserNode);
  mixScreens();
}

//play track
playButton.onclick = function() {
  if (simonSoundEl.paused) {
    playGuilt();
  } else {
    simonSoundEl.pause();
  }
}
//or pick up sound
micButton.onclick = function() {
  navigator.getUserMedia(
  {audio:true},
    pickUpSound,
    function(err) {
      console.log("The following error occured: " + err);
    } 
  );
}

navigator.getUserMedia(
{audio:true},
  pickUpSound,
  function(err) {
    console.log("The following error occured: " + err);
  } 
);

// ----------------MIDI SHIZZLE
var midi, data;
// request MIDI access
if (navigator.requestMIDIAccess) {
    navigator.requestMIDIAccess({
        sysex: false
    }).then(onMIDISuccess, onMIDIFailure);
} else {
    alert("No MIDI support in your browser.");
}

// midi functions
function onMIDISuccess(midiAccess) {
    // when we get a succesful response, run this code
    midi = midiAccess; // this is our raw MIDI data, inputs, outputs, and sysex status

    var inputs = midi.inputs.values();
    // loop over all available inputs and listen for any MIDI input
    for (var input = inputs.next(); input && !input.done; input = inputs.next()) {
        // each time there is a midi message call the onMIDIMessage function
        input.value.onmidimessage = onMIDIMessage;
    }


}

function onMIDIFailure(error) {
    // when we get a failed response, run this code
    console.log("No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim " + error);
}

var vidFile = 'heman',
cssThang = 'simpleSpectrum';
reqAnim(cssThang);
function onMIDIMessage(message) {
    data = message.data;
    // console.log('MIDI data', data);

    // Threshold for mixing - this show/hides screens
    if ( (data[0] === minim.cross[0]) && (data[1] === minim.cross[1]) ) {
      var bezierVal = data[2]/127;
      threshold = ( easing(bezierVal) )*240
      // console.log('midi:'+data[2]+'bezier:'+bezierVal+'threshold:'+threshold);
      // console.log(data[2],bezierVal,threshold);
    }

    // if top left button show cartoons left
    if ( (data[0] === minim.left.button1.onPress[0]) && (data[1] === minim.left.button1.onPress[1]) ) {
      showVideo(leftVidEl, leftCssEl);
      set = 'cartoons';
    }
    // if second left button show abstract left
    if ( (data[0] === minim.left.button2.onPress[0]) && (data[1] === minim.left.button2.onPress[1]) ) {
      showVideo(leftVidEl, leftCssEl);
      set = 'abstract';
    }
    // if third left button show games left
    if ( (data[0] === minim.left.button3.onPress[0]) && (data[1] === minim.left.button3.onPress[1]) ) {
      showVideo(leftVidEl, leftCssEl);
      set = 'games';
    }
    // if forth left button show css/html left
    if ( (data[0] === minim.left.button4.onPress[0]) && (data[1] === minim.left.button4.onPress[1]) ) {
      showVideo(leftVidEl, leftCssEl);
      set = 'matt';

    }

    // if top right buttons show cartoons right
    if ( (data[0] === minim.right.button1.onPress[0]) && (data[1] === minim.right.button1.onPress[1]) ) {
      showVideo(rightVidEl, rightCssEl);
      set = 'cartoons';
    }
    // if second right button show abstract right
    if ( (data[0] === minim.right.button2.onPress[0]) && (data[1] === minim.right.button2.onPress[1]) ) {
      showVideo(rightVidEl, rightCssEl);
      set = 'abstract';
    }
    // if third right button show games right
    if ( (data[0] === minim.right.button3.onPress[0]) && (data[1] === minim.right.button3.onPress[1]) ) {
      showVideo(rightVidEl, rightCssEl);
      set = 'games';
    }
    // if forth right button show css/html right
    if ( (data[0] === minim.right.button4.onPress[0]) && (data[1] === minim.right.button4.onPress[1]) ) {
      showVideo(rightVidEl, rightCssEl);
      set = 'matt';
    }

    //cartoons one set
    if (set === 'cartoons') {
      switch (data[0],data[1]) {
        case minim.left.pad1.onPress[0],minim.left.pad1.onPress[1]:
          vidFile = vidSources.cartoons1[0];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case minim.left.pad2.onPress[0],minim.left.pad2.onPress[1]:
          vidFile = vidSources.cartoons1[1];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case minim.left.pad3.onPress[0],minim.left.pad3.onPress[1]:
          vidFile = vidSources.cartoons1[2];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case minim.left.pad4.onPress[0],minim.left.pad4.onPress[1]:
          vidFile = vidSources.cartoons1[3];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;
        
        case minim.right.pad1.onPress[0],minim.right.pad1.onPress[1]:
          vidFile = vidSources.cartoons1[4];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case minim.right.pad2.onPress[0], minim.right.pad2.onPress[1]:
          vidFile = vidSources.cartoons1[5];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case minim.right.pad3.onPress[0], minim.right.pad3.onPress[1]:
          vidFile = vidSources.cartoons1[6];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case minim.right.pad4.onPress[0], minim.right.pad4.onPress[1]:
          vidFile = vidSources.cartoons1[7];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
      }
    }

    
    // abstract Left
    if (set === 'abstract') {
      switch (data[0],data[1]) {
        case minim.left.pad1.onPress[0],minim.left.pad1.onPress[1]:
          vidFile = vidSources.abstract[0];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
        break;
        case minim.left.pad2.onPress[0],minim.left.pad2.onPress[1]:
          vidFile = vidSources.abstract[1];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
        break;
        case minim.left.pad3.onPress[0],minim.left.pad3.onPress[1]:
          vidFile = vidSources.abstract[2];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
        break;
        case minim.left.pad4.onPress[0],minim.left.pad4.onPress[1]:
          vidFile = vidSources.abstract[3];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
        break;
        
        case minim.right.pad1.onPress[0],minim.right.pad1.onPress[1]:
          vidFile = vidSources.abstract[4];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
        case minim.right.pad2.onPress[0], minim.right.pad2.onPress[1]:
          vidFile = vidSources.abstract[5];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
        case minim.right.pad3.onPress[0], minim.right.pad3.onPress[1]:
          vidFile = vidSources.abstract[6];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
        case minim.right.pad4.onPress[0], minim.right.pad4.onPress[1]:
          vidFile = vidSources.abstract[7];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
      }
    }

    // games
    if (set === 'games') {
      switch (data[0],data[1]) {
        case minim.left.pad1.onPress[0],minim.left.pad1.onPress[1]:
          vidFile = vidSources.games[0];
          changeVidSrc(videoElOne, 'media/games/'+vidFile+'.mp4');
        break;
        case minim.left.pad2.onPress[0],minim.left.pad2.onPress[1]:
          vidFile = vidSources.games[1];
          changeVidSrc(videoElOne, 'media/games/'+vidFile+'.mp4');
        break;
        case minim.left.pad3.onPress[0],minim.left.pad3.onPress[1]:
          vidFile = vidSources.games[2];
          changeVidSrc(videoElOne, 'media/games/'+vidFile+'.mp4');
        break;
        case minim.left.pad4.onPress[0],minim.left.pad4.onPress[1]:
          vidFile = vidSources.games[3];
          changeVidSrc(videoElOne, 'media/games/'+vidFile+'.mp4');
        break;
        
        case minim.right.pad1.onPress[0], minim.right.pad1.onPress[1]:
          vidFile = vidSources.games[4];
          changeVidSrc(videoElTwo, 'media/games/'+vidFile+'.mp4');
        break;
        case minim.right.pad2.onPress[0], minim.right.pad2.onPress[1]:
          vidFile = vidSources.games[5];
          changeVidSrc(videoElTwo, 'media/games/'+vidFile+'.mp4');
        break;
        case minim.right.pad3.onPress[0], minim.right.pad3.onPress[1]:
          vidFile = vidSources.games[6];
          changeVidSrc(videoElTwo, 'media/games/'+vidFile+'.mp4');
        break;
        case minim.right.pad4.onPress[0], minim.right.pad4.onPress[1]:
          vidFile = vidSources.games[7];
          changeVidSrc(videoElTwo, 'media/games/'+vidFile+'.mp4');
        break;
      }
    }

    if (set === 'matt') {
      switch (data[0],data[1]) {
        case minim.left.pad1.onPress[0],minim.left.pad1.onPress[1]:
          vidFile = vidSources.matt[0];
          changeVidSrc(videoElOne, 'media/matt/'+vidFile+'.mp4');
        break;
        case minim.left.pad2.onPress[0],minim.left.pad2.onPress[1]:
          vidFile = vidSources.matt[1];
          changeVidSrc(videoElOne, 'media/matt/'+vidFile+'.mp4');
        break;
        case minim.left.pad3.onPress[0],minim.left.pad3.onPress[1]:
          vidFile = vidSources.matt[2];
          changeVidSrc(videoElOne, 'media/matt/'+vidFile+'.mp4');
        break;
        case minim.left.pad4.onPress[0],minim.left.pad4.onPress[1]:
          vidFile = vidSources.matt[3];
          changeVidSrc(videoElOne, 'media/matt/'+vidFile+'.mp4');
        break;
        // case minim.left.pad4.onPress[0],minim.left.pad4.onPress[1]:
        //   vidFile = vidSources.matt[3];
        //   changeVidSrc(videoElOne, 'media/matt/'+vidFile+'.mp4');
        // break;
        
        case minim.right.pad1.onPress[0], minim.right.pad1.onPress[1]:
          vidFile = vidSources.matt[4];
          changeVidSrc(videoElTwo, 'media/matt/'+vidFile+'.mp4');
        break;
        case minim.right.pad2.onPress[0], minim.right.pad2.onPress[1]:
          vidFile = vidSources.matt[5];
          changeVidSrc(videoElTwo, 'media/matt/'+vidFile+'.mp4');
        break;
        case minim.right.pad3.onPress[0], minim.right.pad3.onPress[1]:
          vidFile = vidSources.matt[6];
          changeVidSrc(videoElTwo, 'media/matt/'+vidFile+'.mp4');
        break;
        // case minim.right.pad4.onPress[0], minim.right.pad4.onPress[1]:
        //   vidFile = vidSources.matt[7];
        //   changeVidSrc(videoElTwo, 'media/matt/'+vidFile+'.mp4');
        // break;
      }
    }


    // games
    if (set === 'css') {
      if (data[1] < 40) {
        stopCurrentCss('left');
      } else {
        stopCurrentCss('right');
      }
      
      switch (data[0],data[1]) {
        case minim.left.pad1.onPress[0],minim.left.pad1.onPress[1]:
          cssThang = vidSources.cssIds[0];
        break;
        case minim.left.pad2.onPress[0],minim.left.pad2.onPress[1]:
          cssThang = vidSources.cssIds[1];
        break;
        case minim.left.pad3.onPress[0],minim.left.pad3.onPress[1]:
          cssThang = vidSources.cssIds[2];
        break;
        case minim.left.pad4.onPress[0],minim.left.pad4.onPress[1]:
          cssThang = vidSources.cssIds[3];
        break;
        
        case minim.right.pad1.onPress[0], minim.right.pad1.onPress[1]:
          cssThang = vidSources.cssIds[4];
        break;
        case minim.right.pad2.onPress[0], minim.right.pad2.onPress[1]:
          cssThang = vidSources.cssIds[5];
        break;
        case minim.right.pad3.onPress[0], minim.right.pad3.onPress[1]:
          cssThang = vidSources.cssIds[6];
        break;
        case minim.right.pad4.onPress[0], minim.right.pad4.onPress[1]:
          cssThang = vidSources.cssIds[7];
        break;

        reqAnim();
      }
    }



    // effects

    // black
    if ( (data[0] === minim.topButton1.onPress[0]) && (data[1] === minim.topButton1.onPress[1]) ) {

      if ( data[2] === minim.topButton1.onPress[2] ) {
        blackEl.style.opacity = 1;
      } else if ( data[2] === minim.topButton1.onRelease[2] ) {
        blackEl.style.opacity = 0;
      }
      
    }

    // white
    if ( (data[0] === minim.topButton2.onPress[0]) && (data[1] === minim.topButton2.onPress[1]) ) {

      if ( data[2] === minim.topButton2.onPress[2] ) {
        whiteEl.style.opacity = 1;
      } else if ( data[2] === minim.topButton2.onRelease[2] ) {
        whiteEl.style.opacity = 0;
      }
      
    }

    // invert
    if ( (data[0] === minim.topButton3.onPress[0]) && (data[1] === minim.topButton3.onPress[1]) ) {

      if ( data[2] === minim.topButton3.onPress[2] ) {
        videoElOne.style.webkitFilter = "invert(100%)";
        videoElTwo.style.webkitFilter = "invert(100%)";
      } else if ( data[2] === minim.topButton3.onRelease[2] ) {
        videoElOne.style.webkitFilter = "invert(0%)";
        videoElTwo.style.webkitFilter = "invert(0%)";
      }
      
    }

    // zoom
    if ( (data[0] === minim.topButton4.onPress[0]) && (data[1] === minim.topButton4.onPress[1]) ) {

      if ( data[2] === minim.topButton4.onPress[2] ) {
        rightScreen.style.transform = 'scale(3)';
        leftScreen.style.transform = 'scale(3)';
      } else if ( data[2] === minim.topButton4.onRelease[2] ) {
        rightScreen.style.transform = 'scale(1)';
        leftScreen.style.transform = 'scale(1)';
      }
      
    }

    //

    return data;
}

</script>

</html>
