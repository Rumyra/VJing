<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link rel="shortcut icon" href="favicon.ico" />
	<title>VJing Demo</title>
	<link type="text/css" href="style.css" rel="stylesheet" media="screen">
  <script src="MIDIValues.js"></script>
  <script src="mediaLibrary.js"></script>
	<script src="visualFuncs.js"></script>
  <style type="text/css">
  html {cursor: none;}
  #video {display:block;}
  #video-two {-webkit-filter: hue-rotate(140deg);}
  </style>
</head>

<body>
	<div class="container">
		<section id="controls">
			<button id="play-audio">Play Audio</button>
			<button id="use-mic">Use Mic</button>
			<audio id="simon" src="media/Guilt.mp3" loop></audio>
		</section>

		<section id="screen">

			<div id="video">
				<video id="video-one" autoplay loop>
          <source src="media/80sIntros/he-manSUB01.mp4" type="video/mp4">
			  </video>
			  <video id="video-two" autoplay loop>
          <source src="media/80sIntros/thundercats01.mp4" type="video/mp4">
			  </video>
			</div>

			<div id="black"></div>
			<div id="white"></div>

		</section>
	</div>
</body>

<script type="text/javascript">

// ~~~~ SETUP vars
var AudioContext = (window.AudioContext || window.webkitAudioContext);

var simonSoundEl = document.getElementById('simon'),
  playButton = document.getElementById('play-audio'),
	micButton = document.getElementById('use-mic'),
	lightEls = document.getElementsByTagName('i'),
  circleEls = document.getElementsByTagName('b'),
  zCircleEls = document.getElementsByTagName('em'),
	videoElOne = document.getElementById('video-one'),
	videoElTwo = document.getElementById('video-two'),
	videoCont = document.getElementById('video'),
	cssCont = document.getElementById('css'),
	blackEl = document.getElementById('black'),
	whiteEl = document.getElementById('white'),
  threshold = 300,
  elColour = 0,

  currentCssEl = document.getElementById('squareLights'),
  nextCssEl,
  squaredLights = document.getElementById('squareLights'),
  sizedCircles = document.getElementById('difSizedCircles'),
  crazyCircles = document.getElementById('crazyCircles'),

	audioAPI = new AudioContext,
	guiltMp3 = audioAPI.createMediaElementSource(simonSoundEl),
  analyserNode = audioAPI.createAnalyser(),
  frequencyData = new Uint8Array(1024);
	
// ~~~~ ANALYSER
analyserNode.fftSize = 2048;

// set up getUserMedia
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

var playGuilt = function playGuilt() {
	guiltMp3.connect(analyserNode);
	guiltMp3.connect(audioAPI.destination);
	analyserNode.connect(audioAPI.destination);
	simonSoundEl.play();
  flashLights();
  sizeCircles();
	crazedCircles();
	mixVids();
}

var pickUpSound = function pickUpSound(stream) {
  var ambientNoise = audioAPI.createMediaStreamSource(stream);
  ambientNoise.connect(analyserNode);
  flashLights();
  mixVids();
}

//play track
playButton.onclick = function() {
	if (simonSoundEl.paused) {
		playGuilt();
	} else {
		simonSoundEl.pause();
	}
}
//or pick up sound
micButton.onclick = function() {
  navigator.getUserMedia(
  {audio:true},
    pickUpSound,
    function(err) {
      console.log("The following error occured: " + err);
    } 
  );
}

//switch to mic input

//switch to play track

//keep track playing switch to video with MIDI
// ----------------MIDI SHIZZLE
var midi, data;
// request MIDI access
if (navigator.requestMIDIAccess) {
    navigator.requestMIDIAccess({
        sysex: false
    }).then(onMIDISuccess, onMIDIFailure);
} else {
    alert("No MIDI support in your browser.");
}

// midi functions
function onMIDISuccess(midiAccess) {
    // when we get a succesful response, run this code
    midi = midiAccess; // this is our raw MIDI data, inputs, outputs, and sysex status

    var inputs = midi.inputs.values();
    // loop over all available inputs and listen for any MIDI input
    for (var input = inputs.next(); input && !input.done; input = inputs.next()) {
        // each time there is a midi message call the onMIDIMessage function
        input.value.onmidimessage = onMIDIMessage;
    }


}

function onMIDIFailure(error) {
    // when we get a failed response, run this code
    console.log("No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim " + error);
}

var vidFile = 'he-manSUB01';
function onMIDIMessage(message) {
    data = message.data; // this gives us our [command/channel, note, velocity] data.
    console.log('MIDI data', data); // MIDI data [144, 63, 73]

    // Threshold for mixing
    if ( (data[0] === akaiControls.prog2.dial4[0]) && (data[1] === akaiControls.prog2.dial4[1]) ) {
      threshold = (data[2]*2)+50;
      // console.log('threshold:'+threshold);
    }
    else if ( (data[0] === akaiControls.prog1.PAD.pad1.onPress[0]) || (data[0] === akaiControls.prog1.progChng.pad1[0]) ) {

      // show css cont here
      showCss(videoCont, cssCont);

      switch (data[0], data[1]) {
        case akaiControls.prog1.PAD.pad1.onPress[0], akaiControls.prog1.PAD.pad1.onPress[1]:
          squaredLights.style.display = "-webkit-flex";
          sizedCircles.style.display = "none";
          crazyCircles.style.display = "none";
        break;
        case akaiControls.prog1.PAD.pad2.onPress[0], akaiControls.prog1.PAD.pad2.onPress[1]:
          squaredLights.style.display = "none";
          sizedCircles.style.display = "-webkit-flex";
          crazyCircles.style.display = "none";
        break;
        case akaiControls.prog1.PAD.pad3.onPress[0], akaiControls.prog1.PAD.pad3.onPress[1]:
          squaredLights.style.display = "none";
          sizedCircles.style.display = "none";
          crazyCircles.style.display = "block";
        break;
      }

      
    }
    // if prog 2 values show 80s cartoons
    else if ( (data[0] === akaiControls.prog2.PAD.pad1.onPress[0]) || (data[0] === akaiControls.prog2.progChng.pad1[0]) ) {

      // show vid cont here
      showVideo(videoCont, cssCont);

      switch (data[0], data[1]) {
        case akaiControls.prog2.PAD.pad1.onPress[0], akaiControls.prog2.PAD.pad1.onPress[1]:
          vidFile = vidSources.eightiesIntros[0];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.PAD.pad2.onPress[0], akaiControls.prog2.PAD.pad2.onPress[1]:
          vidFile = vidSources.eightiesIntros[1];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.PAD.pad3.onPress[0], akaiControls.prog2.PAD.pad3.onPress[1]:
          vidFile = vidSources.eightiesIntros[2];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.PAD.pad4.onPress[0], akaiControls.prog2.PAD.pad4.onPress[1]:
          vidFile = vidSources.eightiesIntros[3];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;

        case akaiControls.prog2.PAD.pad5.onPress[0], akaiControls.prog2.PAD.pad5.onPress[1]:
          vidFile = vidSources.eightiesIntros[4];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.PAD.pad6.onPress[0], akaiControls.prog2.PAD.pad6.onPress[1]:
          vidFile = vidSources.eightiesIntros[5];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.PAD.pad7.onPress[0], akaiControls.prog2.PAD.pad7.onPress[1]:
          vidFile = vidSources.eightiesIntros[6];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.PAD.pad8.onPress[0], akaiControls.prog2.PAD.pad8.onPress[1]:
          vidFile = vidSources.eightiesIntros[7];
          changeVidSrc(videoElOne, 'media/80sIntros/'+vidFile+'.mp4');
          break;

        case akaiControls.prog2.progChng.pad1[0], akaiControls.prog2.progChng.pad1[1]:
          vidFile = vidSources.eightiesIntros[8];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad2[0], akaiControls.prog2.progChng.pad2[1]:
          vidFile = vidSources.eightiesIntros[9];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad3[0], akaiControls.prog2.progChng.pad3[1]:
          vidFile = vidSources.eightiesIntros[10];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad4[0], akaiControls.prog2.progChng.pad4[1]:
          vidFile = vidSources.eightiesIntros[11];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad5[0], akaiControls.prog2.progChng.pad5[1]:
          vidFile = vidSources.eightiesIntros[12];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad6[0], akaiControls.prog2.progChng.pad6[1]:
          vidFile = vidSources.eightiesIntros[13];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad7[0], akaiControls.prog2.progChng.pad7[1]:
          vidFile = vidSources.eightiesIntros[14];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;
        case akaiControls.prog2.progChng.pad8[0], akaiControls.prog2.progChng.pad8[1]:
          vidFile = vidSources.eightiesIntros[15];
          changeVidSrc(videoElTwo, 'media/80sIntros/'+vidFile+'.mp4');
          break;

        default: vidFile = "he-manSUB01";
      }

    }

    

    // else if prog 2 values show css


    // else if prog 3 values show fractals


    // dial for black & white
    if ( (data[0] === 176) && (data[1] === 5) ) {
    	var opacityVal = data[2]/100;
    	blackEl.style.opacity = opacityVal;
    }
    if ( (data[0] === 176) && (data[1] === 6) ) {
    	var opacityVal = data[2]/100;
    	whiteEl.style.opacity = opacityVal;
    }
    if ( (data[0] === 176) && (data[1] === 7) ) {
    	var zoomVal = (data[2]*0.1)+1;
    	cssCont.style.transform = 'scale('+zoomVal+')';
    	videoCont.style.transform = 'scale('+zoomVal+')';
    }
    if ( (data[0] === 176) && (data[1] === 8) ) {
    	if (data[2] > 4) {
    		var zoomVal = (4/data[2]);
    	} else {var zoomVal = 1};
    	
    	cssCont.style.transform = 'scale('+zoomVal+')';
    	videoCont.style.transform = 'scale('+zoomVal+')';
    }
    if ( (data[0] === 176) && (data[1] === 1) ) {
    	if (data[2] === 0) {
    		cssCont.style.backgroundColor = 'black';
    	} else {
	    	var colourVal = data[2]*3;
	    	cssCont.style.backgroundColor = 'hsla('+colourVal+',50%,20%,1)';
	    }
    }
    if ( (data[0] === 176) && (data[1] === 2) ) {
      elColour = data[2];
    }


    return data;
}


function init() {
	// playTrack(playButton);
}
init();

</script>

</html>
