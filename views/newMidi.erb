<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link rel="shortcut icon" href="favicon.ico" />
	<title>VJing Demo</title>
	<link type="text/css" href="style.css" rel="stylesheet" media="screen">
  <script src="MIDIValues.js"></script>
  <script src="mediaLibrary.js"></script>
	<script src="visualFuncs.js"></script>
  <style type="text/css">
  html {cursor: none;}
  #screen > div,
  #screen > div > section {
    position: absolute; top:0px; left:0px;
    width: 100%; height: 94vh;
  }
  .video {display:none;}
  .video video {width:100%; height:auto;}
  .css {background-color: black;}
  #screen-left {opacity: 1;}
  #screen-right {opacity: 0;}
  </style>
</head>

<body>
	<div class="container">
		<section id="controls">
			<button id="play-audio">Play Audio</button>
			<button id="use-mic">Use Mic</button>
			<audio id="simon" src="media/daveClarkeIloveTecho2014.mp3" loop></audio>
		</section>

		<section id="screen">

      <div id="screen-left">
        <section class="video">
          <video id="video-one" autoplay loop>
            <source src="media/cartoons/thundercats01.mp4" type="video/mp4">
          </video>
        </section>
        <section class="css">
          <section class="abstract square-lights" id="squareLights">
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
          </section>

          <section class="abstract sized-squares" id="difSizedCircles">
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
          </section>

          <section class="abstract crazy-circles" id="crazyCircles">
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
          </section>
        </section>
      </div>


      <div id="screen-right">
        <section class="video">
          <video id="video-two" autoplay loop>
            <source src="media/cartoons/heman.mp4" type="video/mp4">
          </video>
        </section>
        <section class="css">
          <section class="abstract square-lights" id="squareLights">
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
          </section>

          <section class="abstract sized-squares" id="difSizedCircles">
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
            <b></b><b></b><b></b>
          </section>

          <section class="abstract crazy-circles" id="crazyCircles">
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
            <em></em><em></em><em></em>
          </section>
        </section>
      </div>
		</section>
	</div>
</body>

<script type="text/javascript">

// ~~~~ SETUP vars
var AudioContext = (window.AudioContext || window.webkitAudioContext);

var simonSoundEl = document.getElementById('simon'),
  playButton = document.getElementById('play-audio'),
	micButton = document.getElementById('use-mic'),
	lightEls = document.getElementsByTagName('i'),
  circleEls = document.getElementsByTagName('b'),
  zCircleEls = document.getElementsByTagName('em'),
	videoElOne = document.getElementById('video-one'),
	videoElTwo = document.getElementById('video-two'),
	// videoCont = document.getElementById('video'),
	// cssCont = document.getElementById('css'),
	// blackEl = document.getElementById('black'),
	// whiteEl = document.getElementById('white'),
  leftScreen = document.getElementById('screen-left'),
  leftVidEl = leftScreen.getElementsByClassName('video')[0],
  leftCssEl = leftScreen.getElementsByClassName('css')[0],
  rightScreen = document.getElementById('screen-right'),
  rightVidEl = rightScreen.getElementsByClassName('video')[0],
  rightCssEl = rightScreen.getElementsByClassName('css')[0],
  set = 'css',
  threshold = 0,
  elColour = 0,

  // currentCssEl = document.getElementById('squareLights'),
  // nextCssEl,
  squaredLights = document.getElementById('squareLights'),
  sizedCircles = document.getElementById('difSizedCircles'),
  crazyCircles = document.getElementById('crazyCircles'),
  leftSquaredLights = leftScreen.getElementsByClassName('square-lights')[0],
  leftSizedSquares = leftScreen.getElementsByClassName('sized-squares')[0],
  leftCrazyCircles = leftScreen.getElementsByClassName('crazy-circles')[0],
  rightSquaredLights = rightScreen.getElementsByClassName('square-lights')[0],
  rightSizedSquares = rightScreen.getElementsByClassName('sized-squares')[0],
  rightCrazyCircles = rightScreen.getElementsByClassName('crazy-circles')[0],

	audioAPI = new AudioContext,
	guiltMp3 = audioAPI.createMediaElementSource(simonSoundEl),
  analyserNode = audioAPI.createAnalyser(),
  frequencyData = new Uint8Array(1024);
	
// ~~~~ ANALYSER
analyserNode.fftSize = 2048;

// set up getUserMedia
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

var playGuilt = function playGuilt() {
	guiltMp3.connect(analyserNode);
	guiltMp3.connect(audioAPI.destination);
	analyserNode.connect(audioAPI.destination);
	simonSoundEl.play();
  flashLights();
  sizeCircles();
	crazedCircles();
	mixScreens();
}

var pickUpSound = function pickUpSound(stream) {
  var ambientNoise = audioAPI.createMediaStreamSource(stream);
  ambientNoise.connect(analyserNode);
  flashLights();
  mixVids();
}

//play track
playButton.onclick = function() {
	if (simonSoundEl.paused) {
		playGuilt();
	} else {
		simonSoundEl.pause();
	}
}
//or pick up sound
micButton.onclick = function() {
  navigator.getUserMedia(
  {audio:true},
    pickUpSound,
    function(err) {
      console.log("The following error occured: " + err);
    } 
  );
}

//switch to mic input

//switch to play track

//keep track playing switch to video with MIDI
// ----------------MIDI SHIZZLE
var midi, data;
// request MIDI access
if (navigator.requestMIDIAccess) {
    navigator.requestMIDIAccess({
        sysex: false
    }).then(onMIDISuccess, onMIDIFailure);
} else {
    alert("No MIDI support in your browser.");
}

// midi functions
function onMIDISuccess(midiAccess) {
    // when we get a succesful response, run this code
    midi = midiAccess; // this is our raw MIDI data, inputs, outputs, and sysex status

    var inputs = midi.inputs.values();
    // loop over all available inputs and listen for any MIDI input
    for (var input = inputs.next(); input && !input.done; input = inputs.next()) {
        // each time there is a midi message call the onMIDIMessage function
        input.value.onmidimessage = onMIDIMessage;
    }


}

function onMIDIFailure(error) {
    // when we get a failed response, run this code
    console.log("No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim " + error);
}

var vidFile = 'he-manSUB01';
function onMIDIMessage(message) {
    data = message.data; // this gives us our [command/channel, note, velocity] data.
    console.log('MIDI data', data); // MIDI data [144, 63, 73]

    // Threshold for mixing - this show/hides screens
    if ( (data[0] === iDJcontrols.cross[0]) && (data[1] === iDJcontrols.cross[1]) ) {
      threshold = (data[2]*2)+50;
      // console.log('threshold:'+threshold);
    }
    // if top left middle buttons show cartoons
    if ( (data[0] === iDJcontrols.left.midButs.topLeft.onPress[0]) && (data[1] === iDJcontrols.left.midButs.topLeft.onPress[1]) ) {

      showVideo(leftVidEl, leftCssEl);
      set = 'cartoons';
      console.log(set);
    }
    // if top left right middle buttons show css
    if ( (data[0] === iDJcontrols.left.midButs.topRight.onPress[0]) && (data[1] === iDJcontrols.left.midButs.topRight.onPress[1]) ) {

      showCss(leftVidEl, leftCssEl);
      set = 'css';
    }
    // if bottom left middle button show abstract
    if ( (data[0] === iDJcontrols.left.midButs.botLeft.onPress[0]) && (data[1] === iDJcontrols.left.midButs.botLeft.onPress[1]) ) {

      showVideo(leftVidEl, leftCssEl);
      set = 'abstract';
    }
    // if top right middle buttons show cartoons
    if ( (data[0] === iDJcontrols.right.midButs.topLeft.onPress[0]) && (data[1] === iDJcontrols.right.midButs.topLeft.onPress[1]) ) {

      showVideo(rightVidEl, rightCssEl);
      set = 'cartoons';

    }
    // if top left right middle buttons show css
    if ( (data[0] === iDJcontrols.right.midButs.topRight.onPress[0]) && (data[1] === iDJcontrols.right.midButs.topRight.onPress[1]) ) {

      showCss(rightVidEl, rightCssEl);
      set = 'css';
    }
    // if bottom right middle button show abstract
    if ( (data[0] === iDJcontrols.right.midButs.botLeft.onPress[0]) && (data[1] === iDJcontrols.right.midButs.botLeft.onPress[1]) ) {

      showVideo(rightVidEl, rightCssEl);
      set = 'abstract';
    }

    if (set === "css") {
      switch (data[0], data[1]) {
        case iDJcontrols.left.sync.onPress[0], iDJcontrols.left.sync.onPress[1]:
          leftSquaredLights.style.display = "-webkit-flex";
          leftSizedSquares.style.display = "none";
          leftCrazyCircles.style.display = "none";
        break;
        case iDJcontrols.left.lloop.onPress[0], iDJcontrols.left.lloop.onPress[1]:
          leftSquaredLights.style.display = "none";
          leftSizedSquares.style.display = "-webkit-flex";
          leftCrazyCircles.style.display = "none";
        break;
        case iDJcontrols.left.rloop.onPress[0], iDJcontrols.left.rloop.onPress[1]:
          leftSquaredLights.style.display = "none";
          leftSizedSquares.style.display = "none";
          leftCrazyCircles.style.display = "block";
        break;

        case iDJcontrols.right.sync.onPress[0], iDJcontrols.right.sync.onPress[1]:
          rightSquaredLights.style.display = "-webkit-flex";
          rightSizedSquares.style.display = "none";
          rightCrazyCircles.style.display = "none";
        break;
        case iDJcontrols.right.lloop.onPress[0], iDJcontrols.right.lloop.onPress[1]:
          rightSquaredLights.style.display = "none";
          rightSizedSquares.style.display = "-webkit-flex";
          rightCrazyCircles.style.display = "none";
        break;
        case iDJcontrols.right.rloop.onPress[0], iDJcontrols.right.rloop.onPress[1]:
          rightSquaredLights.style.display = "none";
          rightSizedSquares.style.display = "none";
          rightCrazyCircles.style.display = "block";
        break;
      }
    }

    if (set === 'cartoons') {
      switch (data[0],data[1]) {
        case iDJcontrols.left.sync.onPress[0],iDJcontrols.left.sync.onPress[1]:
          vidFile = vidSources.cartoons[0];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
          console.log('worked');
        break;
        case iDJcontrols.left.lloop.onPress[0],iDJcontrols.left.lloop.onPress[1]:
          vidFile = vidSources.cartoons[1];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
          console.log(vidFile);
        break;
        case iDJcontrols.left.rloop.onPress[0],iDJcontrols.left.rloop.onPress[1]:
          vidFile = vidSources.cartoons[2];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case iDJcontrols.left.butOut.onPress[0],iDJcontrols.left.butOut.onPress[1]:
          vidFile = vidSources.cartoons[3];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case iDJcontrols.left.butIn.onPress[0],iDJcontrols.left.butIn.onPress[1]:
          vidFile = vidSources.cartoons[4];
          changeVidSrc(videoElOne, 'media/cartoons/'+vidFile+'.mp4');
        break;

        case iDJcontrols.right.sync.onPress[0], iDJcontrols.right.sync.onPress[1]:
          vidFile = vidSources.cartoons[5];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.lloop.onPress[0], iDJcontrols.right.lloop.onPress[1]:
          vidFile = vidSources.cartoons[6];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.rloop.onPress[0], iDJcontrols.right.rloop.onPress[1]:
          vidFile = vidSources.cartoons[7];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.butOut.onPress[0], iDJcontrols.right.butOut.onPress[1]:
          vidFile = vidSources.cartoons[8];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.butIn.onPress[0], iDJcontrols.right.butIn.onPress[1]:
          vidFile = vidSources.cartoons[9];
          changeVidSrc(videoElTwo, 'media/cartoons/'+vidFile+'.mp4');
        break;
      }
    }

    if (set === 'abstract') {
      switch (data[0],data[1]) {
        case iDJcontrols.left.sync.onPress[0],iDJcontrols.left.sync.onPress[1]:
          vidFile = vidSources.abstract[0];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
          console.log('worked');
        break;
        case iDJcontrols.left.lloop.onPress[0],iDJcontrols.left.lloop.onPress[1]:
          vidFile = vidSources.abstract[1];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
          console.log(vidFile);
        break;
        case iDJcontrols.left.rloop.onPress[0],iDJcontrols.left.rloop.onPress[1]:
          vidFile = vidSources.abstract[2];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
        break;
        case iDJcontrols.left.butOut.onPress[0],iDJcontrols.left.butOut.onPress[1]:
          vidFile = vidSources.abstract[3];
          changeVidSrc(videoElOne, 'media/abstract/'+vidFile+'.mp4');
        break;
        
        case iDJcontrols.right.sync.onPress[0], iDJcontrols.right.sync.onPress[1]:
          vidFile = vidSources.abstract[4];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.lloop.onPress[0], iDJcontrols.right.lloop.onPress[1]:
          vidFile = vidSources.abstract[5];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.rloop.onPress[0], iDJcontrols.right.rloop.onPress[1]:
          vidFile = vidSources.abstract[6];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
        case iDJcontrols.right.butIn.onPress[0], iDJcontrols.right.butIn.onPress[1]:
          vidFile = vidSources.abstract[7];
          changeVidSrc(videoElTwo, 'media/abstract/'+vidFile+'.mp4');
        break;
      }
    }


    function itsJustMaths(input, range) {
      return ( (64-input)/64 )*range;
    }
    // ADD TOP - STRING EFFECTS - ABSTRACT ALTS
    // effects for left screen
    // hue on bal
    if ( (data[0] === iDJcontrols.left.bal.dial[0]) && (data[1] === iDJcontrols.left.bal.dial[1]) ) {
      var degreeVal;
      if (data[2] > 64) {
        degreeVal = (data[2]-64)*3;
      } else {
        degreeVal = itsJustMaths(data[2], 180);
      }
      videoElOne.style.webkitFilter = "hue-rotate("+degreeVal+"deg)";
    }

    // brightness on hi
    if ( (data[0] === iDJcontrols.left.hi.dial[0]) && (data[1] === iDJcontrols.left.hi.dial[1]) ) {
      var brightVal;
      if (data[2] > 64) {
        brightVal = data[2]*1.6;
      } else {
        brightVal = data[2]+(data[2]/2);
      }
      videoElOne.style.webkitFilter = "brightness("+brightVal+"%)";
    }

    // zoom on mid
    if ( (data[0] === iDJcontrols.left.mid.dial[0]) && (data[1] === iDJcontrols.left.mid.dial[1]) ) {
      var zoomVal;
      if (data[2] > 64) {
        zoomVal = ( (data[2]-64)*0.1 )+1;
      } else {
        zoomVal = (data[2]/64);
      }
      leftScreen.style.transform = 'scale('+zoomVal+')';
    }

    // contrast on low
    if ( (data[0] === iDJcontrols.left.low.dial[0]) && (data[1] === iDJcontrols.left.low.dial[1]) ) {
      var contrastVal;
      if (data[2] > 64) {
        contrastVal = data[2]*1.6;
      } else {
        contrastVal = data[2]+(data[2]/2);
      }
      videoElOne.style.webkitFilter = "contrast("+contrastVal+"%)";
    }

    // gray & saturate on gain
    if ( (data[0] === iDJcontrols.left.gain.dial[0]) && (data[1] === iDJcontrols.left.gain.dial[1]) ) {
      var satVal;
      if (data[2] > 64) {
        satVal = data[2]*1.6;
      } else {
        satVal = data[2]+(data[2]/2);
      }
      videoElOne.style.webkitFilter = "saturate("+satVal+"%)";
    }

    // invert & blur on top
    if ( (data[0] === iDJcontrols.left.top.dial[0]) && (data[1] === iDJcontrols.left.top.dial[1]) ) {
      var amountVal;
      if (data[2] > 64) {
        amountVal = ( (data[2]-63) );
        videoElOne.style.webkitFilter = "blur("+amountVal+"px)";
      } else {
        amountVal = itsJustMaths(data[2], 100);
        videoElOne.style.webkitFilter = "invert("+amountVal+"%)";
      }
    }





    // effects for right screen
    //zoom on mid
    if ( (data[0] === iDJcontrols.right.mid.dial[0]) && (data[1] === iDJcontrols.right.mid.dial[1]) ) {
      var zoomVal;
      if (data[2] > 64) {
        zoomVal = ( (data[2]-64)*0.1 )+1;
      } else {
        zoomVal = (data[2]/64);
      }
      rightScreen.style.transform = 'scale('+zoomVal+')';
    }

    // dial for black & white
    // if ( (data[0] === 176) && (data[1] === 5) ) {
    // 	var opacityVal = data[2]/100;
    // 	blackEl.style.opacity = opacityVal;
    // }
    // if ( (data[0] === 176) && (data[1] === 6) ) {
    // 	var opacityVal = data[2]/100;
    // 	whiteEl.style.opacity = opacityVal;
    // }
    // if ( (data[0] === 176) && (data[1] === 7) ) {
    // 	var zoomVal = (data[2]*0.1)+1;
    // 	cssCont.style.transform = 'scale('+zoomVal+')';
    // 	videoCont.style.transform = 'scale('+zoomVal+')';
    // }
    // if ( (data[0] === 176) && (data[1] === 8) ) {
    // 	if (data[2] > 4) {
    // 		var zoomVal = (4/data[2]);
    // 	} else {var zoomVal = 1};
    	
    // 	cssCont.style.transform = 'scale('+zoomVal+')';
    // 	videoCont.style.transform = 'scale('+zoomVal+')';
    // }
    // if ( (data[0] === 176) && (data[1] === 1) ) {
    // 	if (data[2] === 0) {
    // 		cssCont.style.backgroundColor = 'black';
    // 	} else {
	   //  	var colourVal = data[2]*3;
	   //  	cssCont.style.backgroundColor = 'hsla('+colourVal+',50%,20%,1)';
	   //  }
    // }
    // if ( (data[0] === 176) && (data[1] === 2) ) {
    //   elColour = data[2];
    // }


    return data;
}


function init() {
	// playTrack(playButton);
}
init();

</script>

</html>
